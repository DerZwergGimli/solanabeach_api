/*
 * Solanabeach Backend API
 *
 * Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: andrej@vgng.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransactionMeta {
    #[serde(rename = "err", skip_serializing_if = "Option::is_none")]
    pub err: Option<serde_json::Value>,
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<serde_json::Value>,
    #[serde(rename = "logMessages", skip_serializing_if = "Option::is_none")]
    pub log_messages: Option<Vec<String>>,
    #[serde(rename = "preBalances", skip_serializing_if = "Option::is_none")]
    pub pre_balances: Option<Vec<i32>>,
    #[serde(rename = "postBalances", skip_serializing_if = "Option::is_none")]
    pub post_balances: Option<Vec<i32>>,
}

impl TransactionMeta {
    pub fn new() -> TransactionMeta {
        TransactionMeta {
            err: None,
            fee: None,
            status: None,
            log_messages: None,
            pre_balances: None,
            post_balances: None,
        }
    }
}


